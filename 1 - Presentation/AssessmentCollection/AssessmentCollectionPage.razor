@page "/assessments-parameters"

@using System.Net.Http.Json
@using AvaliaRBI.Shared.Functions
@using AvaliaRBI._1___Presentation.AssessmentCollection.Dialogs;
@using AvaliaRBI._1___Presentation.Employees.Dialogs;
@using AvaliaRBI._2___Application;
@using AvaliaRBI._3___Domain;
@using AvaliaRBI._3___Domain.Abstractions;
@inject IDialogService DialogService

<ResetDbComponent OnRestDb="ResetDb" Name="AssessmentCollection"/>

<MudTabs Elevation="0" ApplyEffectsToContainer="true" Rounded="true" PanelClass="pt-2">
    <MudTabPanel Text="Parametros de Avaliação" Style="font-size: 0.8rem" ToolTip="AvaliationParameters">

        <MudDataGrid T="AssessmentCollection" @ref="grid" Items="@collections" DragDropColumnReordering="MudGridConstants.DragDropReorderingEnabled" ColumnsPanelReordering="MudGridConstants.ColumnsPanelReorderingEnabled"
                     ColumnResizeMode="MudGridConstants.ResizeMode" Hideable="MudGridConstants.Hideable" Filterable="MudGridConstants.Filterable" QuickFilter="@_quickFilter" Groupable="MudGridConstants.Groupable"
                     FilterMode="@MudGridConstants.FilterMode" FilterCaseSensitivity="MudGridConstants.FilterCaseSensitivity" ShowMenuIcon="true" FixedHeader="true" Height="65vh"
                     Hover="true" Dense="true" Bordered="false" Style="padding-top: 0.8rem">

            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-5"></MudTextField>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Style="width:10%; margin-right: 2rem; font-size: 0.7rem" OnClick="() => CreateCollection()">Adicionar Critérios</MudButton>

            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <PropertyColumn Property="x => x.Description" Title="Descrição" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <PropertyColumn Property="x => x.CreatedAt.Value.ToShortDateString()" Title="Criado Em" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <TemplateColumn Title="" Hidden="false" Groupable="false" Sortable="false" Filterable="false" StickyRight="false">
                    <CellTemplate>
                        <div class="d-flex justify-end">
                            <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Detalhes" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => SeeCollectionDetails(context.Item.Id)" />
                            <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Editar" Icon="@Icons.Material.Outlined.Edit" OnClick="() => UpdateCollection(context.Item.Id)" />
                            <MudIconButton Size="@Size.Small" Title="Excluir" Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteCollection(context.Item.Id)" />
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="AssessmentCollection" />
            </PagerContent>
        </MudDataGrid>


    </MudTabPanel>
</MudTabs>


@code {

    public MudDataGrid<AssessmentCollection> grid = null;

    [Inject]
    public AssessmentCollectionService AssessmentCollectionService { get; set; }

    private List<AssessmentCollection> collections;

    async Task ResetDb() 
    {
        await AssessmentCollectionService.ResetDb();
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        collections = (await AssessmentCollectionService.GetAll()).ToList();
    }

    private string _searchString;
    private Func<AssessmentCollection, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.CreatedAt.Value.ToShortDateString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Name} {x.Description} {x.CreatedAt.Value.ToShortDateString()}".Contains(_searchString))
            return true;

        return false;
    };


    public DialogOptions GetDialogOptions()
    {
        return new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true };
    }

    private async Task SeeCollectionDetails(int collectionId)
    {
        var collection = (collections!.FirstOrDefault(collection => collection.Id == collectionId))!;
        if (collection == null)
            return;

        var parameters = new DialogParameters();
        parameters.Add("collection", new AssessmentCollection(collection));
        parameters.Add("isUpdate", false);
        parameters.Add("isReadonly", true);

        var dialogResult = await DialogService.Show<UpsertAssessmentCollectionDialog>("Detalhes dos Parametros de Avaliação", parameters, GetDialogOptions()).Result;
        if (dialogResult.Data == null || dialogResult.Canceled)
            return;
    }

    private async Task CreateCollection()
    {
        var parameters = new DialogParameters();
        parameters.Add("collection", new AssessmentCollection());
        parameters.Add("isUpdate", false);
        parameters.Add("isReadonly", false);

        var dialogResult = await DialogService.Show<UpsertAssessmentCollectionDialog>("Cadastrar Parametros de Avaliação", GetDialogOptions()).Result;
        if (dialogResult.Data == null)
            return;

        var createdCollection = dialogResult.Data as AssessmentCollection;
        collections!.Insert(0, createdCollection!);
    }

    private async Task UpdateCollection(int collectionId)
    {
        var collection = (collections!.FirstOrDefault(collection => collection.Id == collectionId))!;
        if (collection == null)
            return;

        var parameters = new DialogParameters();
        parameters.Add("collection", new AssessmentCollection(collection));
        parameters.Add("isUpdate", true);
        parameters.Add("isReadonly", false);

        var dialogResult = await DialogService.Show<UpsertAssessmentCollectionDialog>("Atualizar Parametros de Avaliação", parameters, GetDialogOptions()).Result;
        if (dialogResult.Data == null || dialogResult.Canceled)
            return;

        var updatedCollection = dialogResult.Data as AssessmentCollection;

        collections!.Remove(collection);
        collections!.Insert(0, updatedCollection!);
    }

    private async Task DeleteCollection(int collectionId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Tem certeza de que deseja excluir esse Critério de Avaliação?");
        parameters.Add("SecondaryText", "Essa ação não pode ser desfeita.");
        parameters.Add("ButtonText", "Deletar");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<DeleteRegisterDialog>("Deletar", parameters, options).Result;

        if (dialogResult.Canceled)
            return;

        var result = await AssessmentCollectionService.Delete(collectionId);
        if (!result.IsSuccess)
        {
            await DialogService.ShowError(result.Errors.FirstOrDefault());
            return;
        }

        collections!.RemoveAll(collection => collection.Id == collectionId);
    }
}