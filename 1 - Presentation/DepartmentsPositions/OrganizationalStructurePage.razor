@page "/organizational-structure"
@using System.Net.Http.Json
@using AvaliaRBI.Shared.Dialogs;
@using AvaliaRBI.Shared.Functions
@using AvaliaRBI._1___Presentation.DepartmentsPositions.Dialogs;
@using AvaliaRBI._2___Application;
@using AvaliaRBI._3___Domain;
@inject IDialogService DialogService

<ResetDbComponent OnRestDb="ResetDbDepartmentPosition"  Name="Department and Positions"/>

<MudTabs Elevation="0" ApplyEffectsToContainer="true" Rounded="true" PanelClass="pt-2" @ref="tabs">

    <MudTabPanel Text="Setores" Style="font-size: 0.8rem" ToolTip="Setores">

        <MudCard Style="margin-top: 0.5rem;margin-bottom: 1rem; padding:1rem 1rem 1rem 1.5rem">
            <MudGrid Style="align-items: center;">
                <MudItem xs="12" Style="padding-bottom: 0;">
                    <MudText Typo="Typo.h6" Style="font-size: 1rem">
                        Filtros
                    </MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="_searchStringSector" Placeholder="Pesquisar" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-5"></MudTextField>
                </MudItem>
                <MudItem xs="6" Style="    text-align: right;">
                    <MudButton Class="person-button" Variant="Variant.Filled" StartIcon="fas fa-plus" IconSize="Size.Small" Color="Color.Primary" Size="Size.Small" Style="width:fit-content;margin-right: 0.5rem;  font-size: 0.7rem" OnClick="() => CreateSector()">Criar</MudButton>
                </MudItem>
            </MudGrid>
        </MudCard>

        <MudDataGrid T="Sector" @ref="sectorGrid" Items="@sectors" MultiSelection=false DragDropColumnReordering="MudGridConstants.DragDropReorderingEnabled" ColumnsPanelReordering="MudGridConstants.ColumnsPanelReorderingEnabled"
                        ColumnResizeMode="MudGridConstants.ResizeMode" Hideable="MudGridConstants.Hideable" Filterable="MudGridConstants.Filterable" QuickFilter="@_quickFilterSector" Groupable="MudGridConstants.Groupable"
                        FilterMode="@MudGridConstants.FilterMode" FilterCaseSensitivity="MudGridConstants.FilterCaseSensitivity" ShowMenuIcon="true" FixedHeader="true"
                        Hover="true" Dense="true" Bordered="false">


            <ToolBarContent>
                <MudText Typo="Typo.h6" Style="font-size: 1rem">
                    Setores
                </MudText>
                <MudSpacer />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" Hidden="false" Groupable="false" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <TemplateColumn Title="Descrição" Hidden="false" Groupable="false" Sortable="false" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()">
                    <CellTemplate>
                        <MudText Style="font-size: 0.9rem; white-space: nowrap;">@(context.Item.Description?.Length > 80 ? context.Item.Description.Substring(0, 80) + "..." : context.Item.Description)</MudText>
                        </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="" Hidden="false" Groupable="false" Sortable="false" Filterable="false" StickyRight="false">
                    <CellTemplate>
                        <div class="d-flex justify-end">
                                <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Detalhes" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => SeeSectorDetails(context.Item.Id)" />
                                <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Editar" Icon="@Icons.Material.Outlined.Edit" OnClick="() => UpdateSector(context.Item.Id)" />
                                <MudIconButton Size="@Size.Small" Title="Excluir" Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteSector(context.Item.Id)" />
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                    <MudDataGridPager T="Sector" PageSizeOptions="new int[]{5, 10, 25, 50, 100}"
                                      RowsPerPageString="Linhas por Pág."
                                      InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>

        </MudDataGrid>
    </MudTabPanel>

    <MudTabPanel Text="Departamentos" Style="font-size: 0.8rem" ToolTip="Departments">

            <MudCard Style="margin-top: 0.5rem;margin-bottom: 1rem; padding:1rem 1rem 1rem 1.5rem">
                <MudGrid Style="align-items: center;">
                    <MudItem xs="12" Style="padding-bottom: 0;">
                        <MudText Typo="Typo.h6" Style="font-size: 1rem">
                            Filtros
                        </MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="_searchStringSector" Placeholder="Pesquisar" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-5"></MudTextField>
                    </MudItem>
                    <MudItem xs="6" Style="    text-align: right;">
                        <MudButton Class="person-button" Variant="Variant.Filled" StartIcon="fas fa-plus" IconSize="Size.Small" Color="Color.Primary" Size="Size.Small" Style="width:fit-content;margin-right: 0.5rem;  font-size: 0.7rem" OnClick="() => CreateDepartment()">Criar</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCard>

        <MudDataGrid T="Department" @ref="departmentGrid" Items="@departments" MultiSelection=false DragDropColumnReordering="MudGridConstants.DragDropReorderingEnabled" ColumnsPanelReordering="MudGridConstants.ColumnsPanelReorderingEnabled"
                     ColumnResizeMode="MudGridConstants.ResizeMode" Hideable="MudGridConstants.Hideable" Filterable="MudGridConstants.Filterable" QuickFilter="@_quickFilterDepartment" Groupable="MudGridConstants.Groupable"
                     FilterMode="@MudGridConstants.FilterMode" FilterCaseSensitivity="MudGridConstants.FilterCaseSensitivity" ShowMenuIcon="true" FixedHeader="true"
                     Hover="true" Dense="true" Bordered="false">

            <ToolBarContent>
                <MudText Typo="Typo.h6" Style="font-size: 1rem">
                    Departamentos
                </MudText>
                <MudSpacer />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" Hidden="false" Groupable="false" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />

                <TemplateColumn Title="Descrição" Hidden="false" Groupable="false" Sortable="false" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()">
                    <CellTemplate>
                        <MudText Style="font-size: 0.9rem; white-space: nowrap;">@(context.Item.Description?.Length > 80 ? context.Item.Description.Substring(0, 80) + "..." : context.Item.Description)</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Sector.Name" Title="Setor" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                    <TemplateColumn Title="" Hidden="false" Groupable="false" Sortable="false" Filterable="false" StickyRight="false">
                        <CellTemplate>
                            <div class="d-flex justify-end">
                                <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Detalhes" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => SeeDepartmentDetails(context.Item.Id)" />
                                <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Editar" Icon="@Icons.Material.Outlined.Edit" OnClick="() => UpdateDepartment(context.Item.Id)" />
                                <MudIconButton Size="@Size.Small" Title="Excluir" Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteDepartment(context.Item.Id)" />
                            </div>
                        </CellTemplate>
                </TemplateColumn>

            </Columns>
            <PagerContent>
                <MudDataGridPager T="Department" PageSizeOptions="new int[]{10, 25, 50, 100}"
                                    RowsPerPageString="Linhas por Pág."
                                    InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudTabPanel>


    <MudTabPanel Text="Cargos" Style="font-size: 0.8rem" ToolTip="Positions">
            <MudCard Style="margin-top: 0.5rem;margin-bottom: 1rem; padding:1rem 1rem 1rem 1.5rem">
                <MudGrid Style="align-items: center;">
                    <MudItem xs="12" Style="padding-bottom: 0;">
                        <MudText Typo="Typo.h6" Style="font-size: 1rem">
                            Filtros
                        </MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="_searchStringSector" Placeholder="Pesquisar" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-5"></MudTextField>
                    </MudItem>
                    <MudItem xs="6" Style="    text-align: right;">
                        <MudButton Class="person-button" Variant="Variant.Filled" StartIcon="fas fa-plus" IconSize="Size.Small" Color="Color.Primary" Size="Size.Small" Style="width:fit-content;margin-right: 0.5rem; font-size: 0.7rem" OnClick="() => CreatePosition()">Criar</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCard>

            <MudDataGrid T="PositionJob" @ref="gridPosition" Items="@positions" DragDropColumnReordering="MudGridConstants.DragDropReorderingEnabled" ColumnsPanelReordering="MudGridConstants.ColumnsPanelReorderingEnabled"
                         ColumnResizeMode="MudGridConstants.ResizeMode" Hideable="MudGridConstants.Hideable" Filterable="MudGridConstants.Filterable" QuickFilter="@_quickFilterPosition" Groupable="MudGridConstants.Groupable"
                         FilterMode="@MudGridConstants.FilterMode" FilterCaseSensitivity="MudGridConstants.FilterCaseSensitivity" ShowMenuIcon="true" FixedHeader="true"
                         Hover="true" Dense="true" Bordered="false">

                <ToolBarContent>
                    <MudText Typo="Typo.h6" Style="font-size: 1rem">
                        Cargos
                    </MudText>
                    <MudSpacer />
                </ToolBarContent>

                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Nome" Hidden="false" Groupable="false" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />

                    <TemplateColumn Title="Descrição" Hidden="false" Groupable="false" Sortable="false" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()">
                        <CellTemplate>
                            <MudText Style="font-size: 0.9rem; white-space: nowrap;">@(context.Item.Description?.Length > 50 ? context.Item.Description.Substring(0, 50) + "..." : context.Item.Description)</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                    <PropertyColumn Property="x => x.Department.Name" Title="Departamento" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                    <PropertyColumn Property="x => x.Department.Sector.Name" Title="Setor" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />

                    <TemplateColumn Title="" Hidden="false" Groupable="false" Sortable="false" Filterable="false" StickyRight="false">
                        <CellTemplate>
                            <div class="d-flex justify-end">
                                <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Detalhes" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => SeePositionDetails(context.Item.Id)" />
                                <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Editar" Icon="@Icons.Material.Outlined.Edit" OnClick="() => UpdatePosition(context.Item.Id)" />
                                <MudIconButton Size="@Size.Small" Title="Excluir" Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeletePosition(context.Item.Id)" />
                            </div>
                        </CellTemplate>
                    </TemplateColumn>

                </Columns>
                <PagerContent>
                    <MudDataGridPager T="PositionJob" PageSizeOptions="new int[]{10, 25, 50, 100}"
                                      RowsPerPageString="Linhas por Pág."
                                      InfoFormat="{first_item}-{last_item} de {all_items}" />
                </PagerContent>
            </MudDataGrid>
    </MudTabPanel>
</MudTabs>


 @code {
    MudTabs tabs;

    protected override async Task OnInitializedAsync()
    {
        departments = (await DepartmentService.GetAll()).ToList();
        positions = (await PositionService.GetAll()).ToList();
        sectors = (await SectorService.GetAll()).ToList();
    }

    async Task ResetDbDepartmentPosition()
    {
        await PositionService.ResetDb();
        await DepartmentService.ResetDb();
        await SectorService.ResetDb();
        await OnInitializedAsync();
    }

    public DialogOptions GetDialogOptions()
    {
        return new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
    }

    #region SectorTab

    public MudDataGrid<Sector> sectorGrid = null;

    [Inject]
    public SectorService SectorService { get; set; }

    private List<Sector> sectors;

    private string _searchStringSector;
    private Func<Sector, bool> _quickFilterSector => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchStringDepartment))
            return true;

        if (x.Name.Contains(_searchStringDepartment, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description.Contains(_searchStringDepartment, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Name} {x.Description}".Contains(_searchStringDepartment))
            return true;

        return false;
    };

    private async Task SeeSectorDetails(int sectorId)
    {
        var sector = (sectors!.FirstOrDefault(sector => sector.Id == sectorId))!;
        if (sector == null)
            return;

        var parameters = new DialogParameters();
        parameters.Add("sector", new Sector(sector));
        parameters.Add("isUpdate", false);
        parameters.Add("isReadonly", true);

        var dialogResult = await DialogService.Show<UpsertSectorDialog>("Detalhes do Setor", parameters, GetDialogOptions()).Result;
        if (dialogResult.Data == null || dialogResult.Canceled)
            return;
    }

    private async Task CreateSector()
    {
        var parameters = new DialogParameters();
        parameters.Add("sector", new Sector());
        parameters.Add("isUpdate", false);

        var dialogResult = await DialogService.Show<UpsertSectorDialog>("Cadastrar Setor", GetDialogOptions()).Result;
        if (dialogResult.Data == null)
            return;

        var createdSector = dialogResult.Data as Sector;
        sectors!.Insert(0, createdSector!);
    }

    private async Task UpdateSector(int sectorId)
    {
        var sector = (sectors!.FirstOrDefault(sector => sector.Id == sectorId))!;
        if (sector == null)
            return;

        var parameters = new DialogParameters();
        parameters.Add("sector", new Sector(sector));
        parameters.Add("isUpdate", true);

        var dialogResult = await DialogService.Show<UpsertSectorDialog>("Atualizar Setor", parameters, GetDialogOptions()).Result;
        if (dialogResult.Data == null || dialogResult.Canceled)
            return;

        var updatedSector = dialogResult.Data as Sector;

        sectors!.Remove(sector);
        sectors!.Insert(0, updatedSector!);
    }

    private async Task DeleteSector(int sectorId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Tem certeza de que deseja excluir esse Setor?");
        parameters.Add("SecondaryText", "Essa ação não pode ser desfeita.");
        parameters.Add("ButtonText", "Deletar");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<DeleteRegisterDialog>("Deletar", parameters, options).Result;

        if (dialogResult.Canceled)
            return;

        var result = await SectorService.Delete(sectorId);
        if (!result.IsSuccess)
        {
            await DialogService.ShowError(result.Errors.FirstOrDefault());
            return;
        }

        sectors!.RemoveAll(sector => sector.Id == sectorId);
    }

    #endregion

    #region DepartmentTab

        public MudDataGrid<Department> departmentGrid = null;

        [Inject]
        public DepartmentService DepartmentService { get; set; }

        private List<Department> departments;

        private string _searchStringDepartment;
        private Func<Department, bool> _quickFilterDepartment => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchStringDepartment))
                return true;

            if (x.Name.Contains(_searchStringDepartment, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Description.Contains(_searchStringDepartment, StringComparison.OrdinalIgnoreCase))
                return true;

            if ($"{x.Name} {x.Description}".Contains(_searchStringDepartment))
                return true;

            return false;
        };

        private async Task SeeDepartmentDetails(int departmentId)
        {
            var department = (departments!.FirstOrDefault(department => department.Id == departmentId))!;
            if (department == null)
                return;

            var parameters = new DialogParameters();
            parameters.Add("department", new Department(department));
            parameters.Add("isUpdate", false);
            parameters.Add("isReadonly", true);

            var dialogResult = await DialogService.Show<UpsertDepartmentDialog>("Detalhes do Departamento", parameters, GetDialogOptions()).Result;
            if (dialogResult.Data == null || dialogResult.Canceled)
                return;
        }

        private async Task CreateDepartment()
        {
            var parameters = new DialogParameters();
            parameters.Add("department", new Department());
            parameters.Add("isUpdate", false);

            var dialogResult = await DialogService.Show<UpsertDepartmentDialog>("Cadastrar Departamento", GetDialogOptions()).Result;
            if (dialogResult.Data == null)
                return;

            var createdDepartment = dialogResult.Data as Department;
            departments!.Insert(0, createdDepartment!);
        }

        private async Task UpdateDepartment(int departmentId)
        {
            var department = (departments!.FirstOrDefault(department => department.Id == departmentId))!;
            if (department == null)
                return;

            var parameters = new DialogParameters();
            parameters.Add("department", new Department(department));
            parameters.Add("isUpdate", true);

            var dialogResult = await DialogService.Show<UpsertDepartmentDialog>("Atualizar Departamento", parameters, GetDialogOptions()).Result;
            if (dialogResult.Data == null || dialogResult.Canceled)
                return;

            var updatedDepartment = dialogResult.Data as Department;

            departments!.Remove(department);
            departments!.Insert(0, updatedDepartment!);
        }

        private async Task DeleteDepartment(int departmentId)
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Tem certeza de que deseja excluir esse departamento?");
            parameters.Add("SecondaryText", "Essa ação não pode ser desfeita.");
            parameters.Add("ButtonText", "Deletar");
            parameters.Add("Color", Color.Error);

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialogResult = await DialogService.Show<DeleteRegisterDialog>("Deletar", parameters, options).Result;

            if (dialogResult.Canceled)
                return;

            var result = await DepartmentService.Delete(departmentId);
            if (!result.IsSuccess)
            {
                await DialogService.ShowError(result.Errors.FirstOrDefault());
                return;
            }

            departments!.RemoveAll(department => department.Id == departmentId);
        }

    #endregion

    #region PositionTab


        public MudDataGrid<PositionJob> gridPosition = null;

        [Inject]
        public PositionService PositionService { get; set; }

        private List<PositionJob> positions;

        private string _searchStringPosition;
        private Func<PositionJob, bool> _quickFilterPosition => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchStringPosition))
                return true;

            if (x.Name.Contains(_searchStringPosition, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Description.Contains(_searchStringPosition, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.Department.Name.Contains(_searchStringPosition, StringComparison.OrdinalIgnoreCase))
                return true;

            if ($"{x.Name} {x.Description} {x.Department.Name}".Contains(_searchStringPosition))
                return true;

            return false;
        };

        private async Task SeePositionDetails(int positionId)
        {
            var position = (positions!.FirstOrDefault(position => position.Id == positionId))!;
            if (position == null)
                return;

            var parameters = new DialogParameters();
            parameters.Add("position", new PositionJob(position));
            parameters.Add("isUpdate", false);
            parameters.Add("isReadonly", true);

            var dialogResult = await DialogService.Show<UpsertPositionDialog>("Detalhes do Cargo", parameters, GetDialogOptions()).Result;
            if (dialogResult.Data == null || dialogResult.Canceled)
                return;
        }

        private async Task CreatePosition()
        {
            var parameters = new DialogParameters();
            parameters.Add("position", new PositionJob());
            parameters.Add("isUpdate", false);

            var dialogResult = await DialogService.Show<UpsertPositionDialog>("Cadastrar Cargo", GetDialogOptions()).Result;
            if (dialogResult.Data == null)
                return;

            var createdPosition = dialogResult.Data as PositionJob;
            positions!.Insert(0, createdPosition!);
        }

        private async Task UpdatePosition(int positionId)
        {
            var position = (positions!.FirstOrDefault(position => position.Id == positionId))!;
            if (position == null)
                return;

            var parameters = new DialogParameters();
            parameters.Add("position", new PositionJob(position));
            parameters.Add("isUpdate", true);

            var dialogResult = await DialogService.Show<UpsertPositionDialog>("Atualizar Cargo", parameters, GetDialogOptions()).Result;
            if (dialogResult.Data == null || dialogResult.Canceled)
                return;

            var updatedPosition = dialogResult.Data as PositionJob;

            positions!.Remove(position);
            positions!.Insert(0, updatedPosition!);
        }

        private async Task DeletePosition(int positionId)
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Tem certeza de que deseja excluir esse Cargo?");
            parameters.Add("SecondaryText", "Essa ação não pode ser desfeita.");
            parameters.Add("ButtonText", "Deletar");
            parameters.Add("Color", Color.Error);

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialogResult = await DialogService.Show<DeleteRegisterDialog>("Deletar", parameters, options).Result;

            if (dialogResult.Canceled)
                return;

            var result = await PositionService.Delete(positionId);
            if (!result.IsSuccess)
            {
                await DialogService.ShowError(result.Errors.FirstOrDefault());
                return;
            }

            positions!.RemoveAll(position => position.Id == positionId);
        }

    #endregion

}
