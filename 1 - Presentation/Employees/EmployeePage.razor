@page "/employee"

@using System.Net.Http.Json
@using Ardalis.Result;
@using AvaliaRBI.Shared.Dialogs;
@using AvaliaRBI.Shared.Functions
@using AvaliaRBI._1___Presentation.Employees.Dialogs;
@using AvaliaRBI._2___Application;
@using AvaliaRBI._3___Domain;
@using AvaliaRBI._3___Domain.Abstractions;
@using AvaliaRBI._3___Domain.Models;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<ResetDbComponent OnRestDb="ResetDb" Name="Employee" />

<MudTabs Elevation="0" ApplyEffectsToContainer="true" Rounded="true" PanelClass="pt-2">
    <MudTabPanel Text="Funcionários" Style="font-size: 0.8rem" ToolTip="Employees">
        
        <MudCard Style="margin-top: 0.5rem;margin-bottom: 1rem; padding:1rem 1rem 1rem 1.5rem">
            <MudGrid Style="align-items: center;">
                <MudItem xs="12" Style="padding-bottom: 0;">
                    <MudText Typo="Typo.h6" Style="font-size: 1rem">
                        Filtros
                    </MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="_searchString" Placeholder="Pesquisar" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-5"></MudTextField>
                </MudItem>
                <MudItem xs="6" Style="text-align: right;">
                    <MudButton Class="person-button" Variant="Variant.Filled" StartIcon="fas fa-plus" IconSize="Size.Small" Color="Color.Primary" Size="Size.Small" Style="width:fit-content; margin-right: 1rem; font-size: 0.7rem" OnClick="() => CreateEmployee()">Adicionar</MudButton>

                    <MudIconButton Icon="fas fa-upload" Color="Color.Default" Size="Size.Small" Style="margin-right: 0.5rem; font-size: 0.5rem" OnClick="() => OpenImportDialog()" Title="Importar Excel"></MudIconButton>
                    <MudIconButton Icon="fas fa-download" Color="Color.Default" Size="Size.Small" Style="margin-right: 0.5rem; font-size: 0.5rem" OnClick="() => ExportToExcel()" Title="Exportar Excel"></MudIconButton>
                </MudItem>
            </MudGrid>
        </MudCard>

        <MudDataGrid T="Employee" @ref="grid" Items="@employees" DragDropColumnReordering="MudGridConstants.DragDropReorderingEnabled" ColumnsPanelReordering="MudGridConstants.ColumnsPanelReorderingEnabled"
                     ColumnResizeMode="MudGridConstants.ResizeMode" Hideable="MudGridConstants.Hideable" Filterable="MudGridConstants.Filterable" QuickFilter="@_quickFilter" Groupable="MudGridConstants.Groupable"
                     FilterMode="@MudGridConstants.FilterMode" FilterCaseSensitivity="MudGridConstants.FilterCaseSensitivity" ShowMenuIcon="true" FixedHeader="true"
                     Hover="true" Dense="true" Bordered="false">

            <ToolBarContent>
                <MudText Typo="Typo.h6" Style="font-size: 1rem">
                    Funcionários
                </MudText>
                <MudSpacer />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <PropertyColumn Property="x => x.RG" Title="RG" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <PropertyColumn Property="x => x.AdmissionDate.Value.ToShortDateString()" Title="Admissão" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <PropertyColumn Property="x => x.Position.Name" Title="Cargo" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <PropertyColumn Property="x => x.Position.Department.Name" Title="Departamento" Hidden="false" Groupable="true" Sortable="true" Filterable="true" Comparer="new MudBlazor.Utilities.NaturalComparer()" />
                <TemplateColumn Title="" Hidden="false" Groupable="false" Sortable="false" Filterable="false" StickyRight="false">
                    <CellTemplate>              
                        <div class="d-flex justify-end">
                            <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Detalhes" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="() => SeeEmployeeDetails(context.Item.Id)" />
                            <MudIconButton Style="margin-right:1rem" Size="@Size.Small" Title="Editar" Icon="@Icons.Material.Outlined.Edit" OnClick="() => UpdateEmployee(context.Item.Id)" />
                            <MudIconButton Size="@Size.Small" Title="Excluir" Icon="@Icons.Material.Outlined.Delete" OnClick="() => DeleteEmployee(context.Item.Id)" />
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Employee" PageSizeOptions="new int[]{5, 10, 25, 50, 100}"
                                  RowsPerPageString="Linhas por Pág."
                                  InfoFormat="{first_item}-{last_item} de {all_items}"
                                  />
            </PagerContent>
        </MudDataGrid>
    </MudTabPanel>
</MudTabs>

@code {
    public MudDataGrid<Employee> grid = null;

    [Inject]
    public EmployeeService EmployeeService { get; set; }

    private List<Employee> employees;

    async Task ResetDb()
    {
        await EmployeeService.ResetDb();
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        employees = (await EmployeeService.GetAll()).ToList();
    }

    private string _searchString;
    private Func<Employee, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.AdmissionDate.Value.ToShortDateString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Position.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Position.Department.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Name} {x.AdmissionDate} {x.Position.Name} {x.Position.Department.Name}".Contains(_searchString))
            return true;

        return false;
    };

    public DialogOptions GetDialogOptions()
    {
        return new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
    }

    private async Task SeeEmployeeDetails(int employeeId)
    {
        var employee = (employees!.FirstOrDefault(employee => employee.Id == employeeId))!;
        if (employee == null)
            return;

        var parameters = new DialogParameters();
        parameters.Add("employee", new Employee(employee));
        parameters.Add("isUpdate", false);
        parameters.Add("isReadonly", true);

        var dialogResult = await DialogService.Show<UpsertEmployeeDialog>("Detalhes do Funcionário", parameters, GetDialogOptions()).Result;
        if (dialogResult.Data == null || dialogResult.Canceled)
            return;
    }

    private async Task CreateEmployee()
    {
        var parameters = new DialogParameters();
        parameters.Add("employee", new Employee());
        parameters.Add("isUpdate", false);
        parameters.Add("isReadonly", false);

        var dialogResult = await DialogService.Show<UpsertEmployeeDialog>("Cadastrar Funcionário", GetDialogOptions()).Result;
        if (dialogResult.Data == null)
            return;

        var createdEmployee = dialogResult.Data as Employee;
        employees!.Insert(0, createdEmployee!);
    }

    private async Task UpdateEmployee(int employeeId)
    {
        var employee = (employees!.FirstOrDefault(employee => employee.Id == employeeId))!;
        if (employee == null)
            return;

        var parameters = new DialogParameters();
        parameters.Add("employee", new Employee(employee));
        parameters.Add("isUpdate", true);
        parameters.Add("isReadonly", false);

        var dialogResult = await DialogService.Show<UpsertEmployeeDialog>("Atualizar Funcionário", parameters, GetDialogOptions()).Result;
        if (dialogResult.Data == null || dialogResult.Canceled)
            return;

        var updatedEmployee = dialogResult.Data as Employee;

        employees!.Remove(employee);
        employees!.Insert(0, updatedEmployee!);
    }

    private async Task DeleteEmployee(int employeeId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Tem certeza de que deseja excluir esse funcionário?");
        parameters.Add("SecondaryText", "Essa ação não pode ser desfeita.");
        parameters.Add("ButtonText", "Deletar");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<DeleteRegisterDialog>("Deletar", parameters, options).Result;

        if (dialogResult.Canceled)
            return;

        var result = await EmployeeService.Delete(employeeId);
        if (result.Status == ResultStatus.Error)
        {
            await DialogService.ShowError(result.Errors.FirstOrDefault());
            return;
        }

        employees!.RemoveAll(employee => employee.Id == employeeId);
    }

    private async Task ExportToExcel()
    {
        var processId = $"export-excel-{nameof(Employee)}";
        if (NotificationsService.ProcessAlreadyRunning(processId))
        {
            Snackbar.Add($"Esse relatório já está em andamento, verifique suas notificações para acompanhar o progresso", MudBlazor.Severity.Error);
            return;
        }

        var result = await EmployeeService.ExportEmployeesToExcel(processId);
        if (result)
        {
            Snackbar.Add($"Funcionários exportados com sucesso!", MudBlazor.Severity.Success);
            return;
        }

        Snackbar.Add($"Não foi possível exportar o Relatório de Funcionários!", MudBlazor.Severity.Error);
    }

    private async Task OpenImportDialog()
    {
        var processId = $"import-excel-{nameof(Employee)}";
        if (NotificationsService.ProcessAlreadyRunning(processId))
        {
            Snackbar.Add($"Essa importação já está em andamento, verifique suas notificações para acompanhar o progresso", MudBlazor.Severity.Warning);
            return;
        }

        var importModel = new ImportFileModel()
        {
            ProcessId = processId,
            Extension = "xlsx",
            UploadCallBack = EventCallback.Factory.Create<ImportFileModel>(this, async (importModel) =>
            {
                await ImportByExcel(importModel);
            })
        };

        var parameters = new DialogParameters();
        parameters.Add("ImportModel", importModel);
        parameters.Add("IsImport", true);

        DialogOptions options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true
        };

        await DialogService.Show<ImportFileDialog>("Importar arquivo", parameters, options).Result;
    }

    public async Task ImportByExcel(ImportFileModel importModel)
    {
        try
        {
            var tempFilePath = Path.Combine(Path.GetTempPath(), importModel.File.Name);

            await using (var fileStream = new FileStream(tempFilePath, FileMode.Create, FileAccess.Write))
            {
                await importModel.File.OpenReadStream().CopyToAsync(fileStream);
            }

            var result = await EmployeeService.ImportEmployeesByExcel(tempFilePath, importModel.ProcessId);

            employees = (await EmployeeService.GetAll()).ToList();

            File.Delete(tempFilePath);

            if (result)
            {
                Snackbar.Add($"Funcionários importados com sucesso!", MudBlazor.Severity.Success);
                return;
            }

            Snackbar.Add($"Não foi possível importar os Funcionários!", MudBlazor.Severity.Error);

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Falha ao importar arquivo: {ex.Message}", MudBlazor.Severity.Error);
        }
    }
}
