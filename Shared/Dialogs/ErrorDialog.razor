@using AvaliaRBI._3___Domain.Models;
@using AvaliaRBI._4___Repository.Shared;
@using Newtonsoft.Json;

@inject ISnackbar Snackbar;
﻿<MudDialog>
    <DialogContent>
        @if (Errors.Length == 1)
        {
            <MudText>@Errors[0]</MudText>
        }
        else
        {
            @foreach (string erro in Errors)
            {
                @if (string.IsNullOrEmpty(erro))
                {
                    <br />
                }
                else
                {
                    <MudText>@erro</MudText>
                }
            }
        }

        <br />
    </DialogContent>
    <DialogActions>
        @if (IsQuestion)
        {
            <MudButton OnClick="Cancel">Cancelar</MudButton>
            <MudButton Style="margin-bottom: 5px" Color="@Color" Variant="Variant.Filled" OnClick="Submit">"Sim"</MudButton>
        }
        else if (Obj != null || Exception != null)
        {
            <div class="d-flex" style=" width: 100%; place-content: space-between; padding-inline: 0.5rem;">

                <MudIconButton Disabled="@processing" Size="Size.Small" Style="margin-bottom: 5px" Color="Color.Default" Variant="Variant.Text" OnClick="async () => await SendErrorToSupport()">
                    @if (processing)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" title="Enviando" />
                    }
                    else
                    {
                        <MudIcon Title="Enviar ao suporte" Icon="@Icons.Material.Outlined.Support" Size="Size.Small" Color="Color.Default"></MudIcon>
                    }
                </MudIconButton>
                <MudButton Style="margin-bottom: 5px" Color="@Color" Size="Size.Small" Variant="Variant.Outlined" OnClick="Submit">Ok</MudButton>
            </div>
        }
        else
        {
            <MudButton Style="margin-bottom: 5px" Color="@Color" Size="Size.Small" Variant="Variant.Outlined" OnClick="Submit">Ok</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string[] Errors { get; set; }

    [Parameter] public Color Color { get; set; }
    [Parameter] public bool IsQuestion { get; set; }
    [Parameter] public Exception Exception { get; set; }
    [Parameter] public object Obj { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    private bool processing = false;
    private bool sendedError = false;

    private async Task SendErrorToSupport()
    {
        processing = true;
        if (sendedError)
        {
            Snackbar.Add("Esse erro já foi enviado ao suporte!", Severity.Warning);
            processing = false;
            return;
        }

        try
        {
            await EmailService.SendErrorToSupport(Exception, string.Join(", ", Errors), $"\n\nValue: {JsonConvert.SerializeObject(Obj ?? new { })}");
            sendedError = true;
            Snackbar.Add("Erro enviado para o suporte com sucesso!", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add("Erro ao enviar erro para o suporte!", Severity.Error);
        }

        processing = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}