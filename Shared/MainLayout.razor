@using AvaliaRBI.Shared.Dialogs;
@using AvaliaRBI.Shared.Extensions;
@using AvaliaRBI.Shared.Functions;
@using AvaliaRBI._3___Domain.Models;
@using AvaliaRBI._4___Repository;
@using AvaliaRBI._4___Repository.Shared;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar
@inherits LayoutComponentBase

<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider Theme="MyCustomTheme" @bind-IsDarkMode="@ThemeConstants._isDarkMode" />

<style>
    .overflow-y-auto {
        overflow-y: auto;
    }

    .notification-list .mud-list-item-icon {
        min-width: 35px;
    }
</style>

<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Valorizando Talentos</MudText>
        <MudSpacer />
        <div class="d-flex">

        <MudBadge Visible="@(NotificationsService.UnreadedNotifications > 0)" Content="@NotificationsService.UnreadedNotifications" Color="Color.Error" Overlap="true" Bordered="true">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" @onclick="ToggleNotifications" />
        </MudBadge>


            <MudPopover OverflowBehavior="OverflowBehavior.FlipNever" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight" Open="_isNotificationsPopoverOpen" MaxHeight="300" Class="overflow-y-auto">
                <MudPaper Style="max-height: 300px" Class="overflow-y-auto">

                @if(NotificationsService.Notifications.Count == 0)
                    {
                        <MudPaper  Class="px-4 py-3">
                            <MudText>Nennhuma notificação!</MudText>
                        </MudPaper>
                    }
                    else
                    {
                        <MudList Class="notification-list" Dense="true">
                            @foreach (var notification in NotificationsService.Notifications)
                            {
                                <MudListItem Icon="@notification.GetIcon()" IconSize="Size.Small" IconColor="@notification.GetColor()">
                                    <div class="d-flex" style="align-items: center;">
                                        @if (notification.ImportModel != null)
                                        {
                                            <MudIconButton Style="margin-right:8px" Color="@notification.GetColor()" Icon="@Icons.Material.Filled.FileOpen" Size="Size.Small" aria-label="Detalhes" OnClick="async() => await seeImportDetails(notification)"></MudIconButton>

                                        }
                                        <div class="d-flex flex-column" style="width: 100%; max-width: 560px;">


                                            <MudText Typo="Typo.body2">@notification.Message</MudText>
                                            @if (notification.Type == Notification.NotificationType.Processing)
                                            {
                                                <MudProgressLinear Color="Color.Primary" Value="@notification.Processing.GetPercentage()" Max="100" Class="my-2" />

                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.caption" Style=" font-size: 0.6rem;">@notification.DateTime.ToString("HH:mm")</MudText>
                                            }

                                        </div>
                                        <MudIconButton Style="margin-left:10px" Icon="@Icons.Material.Filled.Close" Size="Size.Small" aria-label="delete" OnClick="() => NotificationsService.RemoveNotification(notification)"></MudIconButton>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>

                    }
                </MudPaper>

            
        </MudPopover>


        </div>
        <div class="d-flex">
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" @onclick="ToggleOptions" />
            <MudPopover OverflowBehavior="OverflowBehavior.FlipNever" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight" Open="_isOptionsPopoverOpen" MaxHeight="300" Class="overflow-y-auto">
                <MudPaper Style="max-height: 300px" Class="overflow-y-auto">
                <MudList Class="notification-list" Dense="true" Clickable="true">
                    <MudListItem OnClick="() => ExportData()">
                        Exportar Dados
                    </MudListItem>
                    <MudListItem OnClick="async () => await ImportData()">
                        Importar Dados
                    </MudListItem>
                    <MudListItem OnClick="() => SendDbToSupport()">
                        Enviar Dados ao suporte
                    </MudListItem>
                </MudList>
                </MudPaper>
            </MudPopover>
        </div>
        <MudSwitch @bind-Checked="@ThemeConstants._isDarkMode" Color="Color.Primary" Class="ml-2" T="bool" title="Modo Claro/Escuro" />

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Style="padding-top: 0.5rem">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Fixed="true" Style="padding-top: 1.5rem; padding-bottom: 1.5rem;">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private MudTheme _theme = new();

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private bool _isNotificationsPopoverOpen = false;
    private bool _isOptionsPopoverOpen = false;


    private void ToggleNotifications()
    {
        if (!_isNotificationsPopoverOpen)
            NotificationsService.UpdateNotificationsReaded();

        _isNotificationsPopoverOpen = !_isNotificationsPopoverOpen;
    }

    private void ToggleOptions()
    {
        _isOptionsPopoverOpen = !_isOptionsPopoverOpen;
    }

    protected override void OnInitialized()
    {
        NotificationsService.OnNotificationsChanged += NotificationsChanged;
    }

    private void NotificationsChanged()
    {
        StateHasChanged();
    }

    public async Task seeImportDetails(Notification notification)
    {
        var parameters = new DialogParameters();
        parameters.Add("ImportModel", notification.ImportModel);

        DialogOptions options = new DialogOptions() {
            MaxWidth = MaxWidth.Medium, 
            FullWidth = true,
            CloseButton = true
        };

        var dialogResult = await DialogService.Show<ImportModelDialog>("Detalhes da Importação", parameters, options).Result;
    }

    public void Dispose()
    {
        NotificationsService.OnNotificationsChanged -= NotificationsChanged;
    }

    public void ExportData()
    {
        try
        {
            DataModel.ExportData();
            Snackbar.Add("Banco de dados exportado com sucesso", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Erro ao exportar o banco de dados: {e.Message}", Severity.Error);
        }
    }

    public async Task SendDbToSupport()
    {
        try
        {
            var emailModel = new EmailModel()
            {
                ToEmail = "daniel.s.6140@gmail.com",
                Subject = $"Banco de Dados Avalia RBI {DateTime.Now.ToString("dd / MM / yyyy HH:mm: ss")}",
                Content = $"Segue o banco de dados atualizado: {DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")}",
                File = new _3___Domain.Models.FileInfo()
                {
                    FileName = "AvaliaRBI",
                    Extension = "db3",
                    FileBytes = DataModel.GetDbFile()
                },
                Format = MimeKit.Text.TextFormat.Text
            };

            await EmailService.SendEmailAsync(emailModel);
            Snackbar.Add("Banco de dados enviado com sucesso", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Erro ao enviar o banco de dados", Severity.Error);
        }
    }

    public async Task ImportData()
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "Color", Color.Warning }
            };
            var result = await DialogService.ShowQuestion("Atencão!", "Tem certeza de que deseja importar um banco de dados? todos os dados da sua aplicação serão substituidos por essa nova base de dados!", parameters);

            if (!result.Canceled)
                await DataModel.ImportData();

            Snackbar.Add("Banco de dados importado com sucesso", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Erro ao importar o banco de dados: {e.Message}", Severity.Error);
        }
    }

    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            Primary = Colors.Orange.Darken3,
            Secondary = Colors.Blue.Darken4,
            AppbarBackground = Colors.Blue.Darken4,
           
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "500px"
        }
    };

}